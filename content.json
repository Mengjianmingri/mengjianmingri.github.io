{"pages":[],"posts":[{"title":"linux基础指令学习","text":"mkdir 创建目录1mkdir myTest/test02 -p -p 递归地建立目录,即可以一次建立多层目录 -m 创建目录的时候直接设定权限 rmdir 删除目录(空文件夹)1rmdir myTest/test02 -p -p 递归删除此文件夹 ls 档案和目录的检视12345678ls [-aAdfFhilRS] 目录名称ls [--color={none,auto,always}] 目录名称ls [--full-time] 目录名称 #例子如下ls -al ~ #列出所有文件夹及文件,包括隐藏文件和文件属性ls -alF --color=never ~ #不显示颜色,但在文件名末显示出该文件名代表的类型 ls -al --full-time ~ #完整呈现文件的修改时间 #同时,ll就相当于ls -l -a ：全部的档案，连同隐藏档( 开头为 . 的档案) 一起列出来～-A ：全部的档案，连同隐藏档，但不包括 . 与 .. 这两个目录，一起列出来～-d ：仅列出目录本身，而不是列出目录内的档案数据-f ：直接列出结果，而不进行排序 (ls 预设会以档名排序！)-F ：根据档案、目录等信息，给予附加数据结构，例如： *：代表可执行档； /：代表目录； =：代表 socket 档案； |：代表 FIFO 档案；-h ：将档案容量以人类较易读的方式(例如 GB, KB 等等)列出来；-i ：列出 inode 位置，而非列出档案属性；-l ：长数据串行出，包含档案的属性等等数据；-n ：列出 UID 与 GID 而非使用者与群组的名称 (UID 与 GID 会在账号管理提到！)-r ：将排序结果反向输出，例如：原本档名由小到大，反向则为由大到小；-R ：连同子目录内容一起列出来；-S ：以档案容量大小排序！-t ：依时间排序–color=never ：不要依据档案特性给予颜色显示；–color=always ：显示颜色–color=auto ：让系统自行依据设定来判断是否给予颜色–full-time ：以完整时间模式 (包含年、月、日、时、分) 输出–time={atime,ctime} ：输出 access 时间或 改变权限属性时间 (ctime)而非内容变更时间 (modification time) cp 复制,建立链接,比对1cp [-adfilprsu] 复制源 粘贴处 -a ：相当于 -pdr 的意思；-d ：若来源文件为连结文件的属性(link file)，则复制连结文件属性而非档案本身；-f ：为强制 (force) 的意思，若有重复或其它疑问时，不会询问使用者，而强制复制；-i ：若目的檔(destination)已经存在时，在覆盖时会先询问是否真的动作！-l ：进行硬式连结 (hard link) 的连结档建立，而非复制档案本身；-p ：连同档案的属性一起复制过去，而非使用预设属性；-r ：递归持续复制，用于目录的复制行为；-s ：复制成为符号连结文件 (symbolic link)，亦即『快捷方式』档案；-u ：若 destination 比 source 旧才更新 destination ！ rm 删除目录或文件1rm [-fir] 文件或目录 -f ：就是 force 的意思，强制移除；-i ：互动模式，在删除前会询问使用者是否动作-r ：递归删除啊！最常用在目录的删除了 mv 移动目录或文件(剪切)1mv [-fiu] 目录或文件名 -f ：force 强制的意思，强制直接移动而不询问；-i ：若目标档案 (destination) 已经存在时，就会询问是否覆盖！-u ：若目标档案已经存在，且 source 比较新，才会更新 (update) 文档查看除去最常用的cat more less 外head 和 tail的用法:12head -n 10 文件名 #显示文件的前十行tail -n 20 文件名 #显示文件的后20行 file 查看文件的类型1file 文件名 #文件的类型,例如二进制或data 文件的 查找which1which 文件名 [-a] #-a是将所有符合条件的结果均列出 whereis1whereis [-bmsu] 文件名 -b :只找 binary 的档案-m :只找在说明文件 manual 路径下的档案-s :只找 source 来源档案-u :没有说明档的档案 locate1locate 部分文件名 #locate 指令类似模糊查询 find1find / -name passwd #find指令的参数较复杂,这条范例是查找文件名为 passwd 的文件 压缩文件处理compress *.Z文件(很少使用)123compress 文件名 #压缩此文件成*.Z格式compress -d 文件名 #解压此文件(前提是此文件是*.Z文件)compress -c 文件1 &gt; 文件2 #将文件1压缩为文件2的同时保留文件1 gzip,zcat *.gz 文件1234gzip 文件1gzip -d 文件2zcat 文件2 #读取文件2解压后的内容gzip -9 -c man.config &gt; man.config.gz #-9压缩速度最慢但压缩后空间最小 ,-1反之,在1到9之间取值 bzip2,bzcat *.bz2 文件1bzip2 文件1 #所有参数同上 tar12tar [-cxtzjvfpPN] 文件夹或文件tar -zxvf *.tar.gz -c ：建立一个压缩档案的参数指令(create 的意思)；-x ：解开一个压缩档案的参数指令！-t ：查看 tarfile 里面的档案！ 特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！ 因为不可能同时压缩与解压缩。-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？-v ：压缩的过程中显示档案！这个常用，但不建议用在背景执行过程！-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！ 例如使用『 tar -zcvfP tfile sfile』就是错误的写法，要写成 『 tar -zcvPf tfile sfile』才对喔！-p ：使用原档案的原来属性（属性不会依据使用者而变）-P ：可以使用绝对路径来压缩！-N ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的档案中！–exclude FILE：在压缩的过程中，不要将 FILE 打包,即排除某个文件","link":"/2020/03/30/linux%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"linux","slug":"linux","link":"/tags/linux/"}],"categories":[{"name":"linux shell","slug":"linux-shell","link":"/categories/linux-shell/"}]}